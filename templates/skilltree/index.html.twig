<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width,initial-scale=1.0"/>
    <title>Skill Tree â€“ {{ skilltreeName }}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        #node-grid p br {
            display: block;
            margin-bottom: 1rem; /* adjust as needed */
        }
    </style>
</head>

<body class="p-4">
    <div class="flex justify-between items-center flex-row mb-6">
        <h1 class="text-center text-4xl font-black my-4">{{ skilltreeName }}</h1>

        {# Legend #}
        <div class="w-1/2 flex flex-wrap justify-end gap-4">
            {% for type, style in typeStyles %}
            <div class="bg-{{ style.twColor}}-50 rounded p-2 flex items-center space-x-2">
                <span class="w-6 h-6 flex items-center justify-center text-white">
                {{ ux_icon(style.icon, { class: 'text-' ~ style.twColor ~ '-500'}) }}
                </span>
                <span class="text-base font-bold">{{ type }}</span>
            </div>
            {% endfor %}
        </div>
    </div>

    {% set gridColsClass = 'grid-cols-' ~ maxCols %}
    {% set gridRowsClass = 'grid-rows-' ~ maxRows %}
    <div id="graph" class="relative mx-auto">
        <svg id="edges" class="absolute inset-0 pointer-events-none z-0"></svg>
        <div id="node-grid" class="grid {{ gridColsClass }} {{ gridRowsClass }} auto-rows-min gap-4">
            {% for n in nodes %}
                <div
                class="bg-{{ n.color }}-50 shadow-sm border-2 border-{{ n.color }}-900 rounded p-2 z-10"
                style="grid-row-start: {{ n.x }}; grid-column-start: {{ n.y }};"
                data-name="{{ n.name }}"
                data-edges="{{ n.edges|join(',') }}"
                >
                    <div class="flex flex-row justify-between items-center mb-4 gap-6">
                        <img src="{{ n.coverUrl }}" alt="{{ n.name }}" class="w-16 h-16 border-2 border-{{ n.color }}-900 object-cover rounded"/>
                        <h1 class="text-2xl font-extrabold text-center">{{ n.name }}</h1>
                        <div class="relative min-w-16 min-h-16">
                            {{ ux_icon(n.iconKey, {class: 'text-' ~ n.color ~ '-900'}) }}
                            <span class="absolute inset-0 flex items-center justify-center text-white font-black">
                            {{ n.cost }}
                            </span>
                        </div>
                    </div>
                    {% if n.description %}
                        <p class="text-sm">{{ n.description|raw|nl2br }}</p>
                    {% endif %}
                </div>
            {% endfor %}
        </div>
    </div>

    {# Pass the node list into JS for edge-drawing #}
    <script>
        const nodes = [
            {% for n in nodes %}
                {
                    name: "{{ n.name|e('js') }}",
                    edges: [{% for e in n.edges %}"{{ e|e('js') }}"{% if not loop.last %}, {% endif %}{% endfor %}],
                }
                {% if not loop.last %}, {% endif %}
            {% endfor %}
        ];

        const graph = document.getElementById('graph');
        const grid = document.getElementById('node-grid');
        const svg = document.getElementById('edges');
        const elementMap = {};

        function computeCenters() {
            const bounds = graph.getBoundingClientRect();

            return Array.from(grid.children).reduce((map, el) => {
                const name = el.getAttribute('data-name');
                const r    = el.getBoundingClientRect();
                map[name]   = {
                x: r.left + r.width/2 - bounds.left,
                y: r.top  + r.height/2 - bounds.top,
                };
                return map;
            }, {});
        }

        function renderEdges() {
            const bounds  = graph.getBoundingClientRect();
            svg.setAttribute('width',  bounds.width);
            svg.setAttribute('height', bounds.height);
            svg.innerHTML = '';

            const centers = computeCenters();
            nodes.forEach(n => {
                const from = centers[n.name];
                n.edges.forEach(targetName => {
                    const to = centers[targetName];
                    if (!from || !to) return;

                    const line = document.createElementNS(svg.namespaceURI, 'line');
                    line.setAttribute('x1', from.x);
                    line.setAttribute('y1', from.y);
                    line.setAttribute('x2', to.x);
                    line.setAttribute('y2', to.y);
                    line.setAttribute('stroke', '#000');
                    line.setAttribute('stroke-width', '15');
                    svg.appendChild(line);
                });
            });
        }

        window.addEventListener('load',  () => requestAnimationFrame(renderEdges));
        window.addEventListener('resize', () => requestAnimationFrame(renderEdges));
    </script>
</body>
</html>
